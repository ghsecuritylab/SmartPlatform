IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "cortex-m4")
    SET(ARCH_FLAGS "${CMAKE_C_FLAGS} -mcpu=cortex-m4 -march=armv7e-m -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16")
    SET(FPU_PRESENT 1)
    ADD_DEFINITIONS(-DARM_MATH_CM4)
ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "cortex-m3")
    SET(ARCH_FLAGS "${CMAKE_C_FLAGS} -mcpu=cortex-m3 -march=armv7-m -mthumb -msoft-float")
    ADD_DEFINITIONS(-DARM_MATH_CM3)
ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "cortex-m7")
    SET(ARCH_FLAGS "${CMAKE_C_FLAGS} -mthumb -mcpu=cortex-m7 -mfloat-abi=hard -mfpu=fpv5-sp-d16")
    ADD_DEFINITIONS(-DARM_MATH_CM7)
ELSE()
    message(FATAL_ERROR
        "No C compiler for '${CMAKE_SYSTEM_PROCESSOR}'"
        " is supported yet."
    )
ENDIF()

INCLUDE_DIRECTORIES(${STM32_PLATFORM_TOP}/arch/CMSIS/Include)
INCLUDE_DIRECTORIES(${STM32_PLATFORM_TOP}/arch/CMSIS/Device/Include)
INCLUDE_DIRECTORIES(${STM32_PLATFORM_TOP}/arch/STM32F4xx_HAL_Driver/Inc)
INCLUDE_DIRECTORIES(${STM32_PLATFORM_TOP}/board/${STM32_PLATFORM_BOARD_NAME}/Include)

AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/STM32F4xx_HAL_Driver/Src SRC_LIST)
AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/Device/Source SRC_LIST)
AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/board/${STM32_PLATFORM_BOARD_NAME}/Source SRC_LIST)

IF(FPU_PRESENT EQUAL 1)

    ADD_DEFINITIONS(-D__FPU_PRESENT=1)

    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/BasicMathFunctions SRC_LIST)
    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/ComplexMathFunctions SRC_LIST)
    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/FastMathFunctions SRC_LIST)
    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/MatrixFunctions SRC_LIST)
    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/SupportFunctions SRC_LIST)
    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/CommonTables SRC_LIST)
    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/ControllerFunctions SRC_LIST)
    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/FilteringFunctions SRC_LIST)
    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/StatisticsFunctions SRC_LIST)
    AUX_SOURCE_DIRECTORY(${STM32_PLATFORM_TOP}/arch/CMSIS/DSP_Lib/TransformFunctions SRC_LIST)

ENDIF()

INCLUDE(${STM32_PLATFORM_TOP}/cmake/rtos-freertos.cmake)
SET(LINK_SCRIPT ${STM32_PLATFORM_TOP}/board/${STM32_PLATFORM_BOARD_NAME}/Script/${STM32_PLATFORM_BOARD_NAME}-freertos.ld)

SET_PROPERTY(SOURCE ${STM32_PLATFORM_TOP}/arch/CMSIS/Device/Source/startup_${STM32_PLATFORM_MCU_TYPE}.s PROPERTY LANGUAGE C)
LIST(APPEND SRC_LIST ${STM32_PLATFORM_TOP}/arch/CMSIS/Device/Source/startup_${STM32_PLATFORM_MCU_TYPE}.s)

SET(CMAKE_EXE_LINKER_FLAGS "-L${STM32_PLATFORM_TOP} -Wl,--gc-sections -Wl,-Map,${STM32_PLATFORM_BOARD_NAME}-Platform.map --specs=nosys.specs -T${LINK_SCRIPT}" CACHE INTERNAL "" FORCE)
SET(CMAKE_C_FLAGS "${ARCH_FLAGS} ${STARTUP_DEFS} -g -Os -flto -ffunction-sections -fdata-sections" CACHE INTERNAL "" FORCE)

# post-process elf files into .hex files:
FUNCTION(CREATE_IMAGE target_name)
    ADD_CUSTOM_COMMAND(TARGET ${target_name}
        POST_BUILD
        COMMAND "${OBJ_COPY}" -O ihex ${target_name} ${target_name}.hex
        COMMENT "Creating ${target_name}.hex ..."
        COMMAND "${OBJ_SIZE}" ${target_name}
        VERBATIM
    )
ENDFUNCTION()
